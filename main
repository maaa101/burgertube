#!/usr/bin/python3
import os
import subprocess
import configparser
from numerize import numerize
from yt_dlp import YoutubeDL
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, send_from_directory

# Define flask
app = Flask(__name__)


# Read configuration
config = configparser.ConfigParser()
config.read("config.ini")

HOST = config["config"]["HOST"]
PORT = config["config"]["PORT"]

DEFAULTSTYLESHEET = "/static/css/style.css"

# [ext=mp4]

ydl_opts = {"format": "bv+ba[ext=webm]",
            "noplaylist": "True",
            "extract_flat": "in_playlist",
            "quiet": "True"}

channel_info_ydl_opts = {"format": "bv+ba[ext=webm]",
                         "noplaylist": "True",
                         "playlist_items": "0",
                         "quiet": "True"}


# Delete directory
def DeleteDir(dir):
    if dir[-1] == os.sep:
        dir = dir[:-1]
    files = os.listdir(dir)
    for file in files:
        if file == '.' or file == '..':
            continue
        path = dir + os.sep + file
        if os.path.isdir(path):
            nukedir(path)
        else:
            os.unlink(path)
    os.rmdir(dir)


def SearchYouTube(query, max):
    with YoutubeDL(ydl_opts) as ydl:
        searchresults = ydl.extract_info(f"ytsearch{max}:{query}", download=False)[
            "entries"][0:max]
        return searchresults


def GetInfo(id, opts):
    with YoutubeDL(opts) as ydl:
        info = ydl.extract_info(id, download=False)
        return info


def GetStyle():
    if "style" in request.cookies:
        style = request.cookies.get("style")
    else:
        style = DEFAULTSTYLESHEET
    return style


@app.route("/", methods=("GET", "POST"))
def home():
    results = GetInfo("https://youtube.com/", ydl_opts)
    return render_template("main.html", style=GetStyle(), results=results["entries"], startpage="startpage")


@app.route("/results", methods=("GET", "POST"))
def results():
    search_query = request.args.get("search_query")
    if search_query:
        searchresults = SearchYouTube(search_query, 60)
        return render_template("main.html", style=GetStyle(), results=searchresults, searchquery=search_query)
    else:
        return redirect("/")


@app.route("/watch", methods=("GET", "POST"))
def watch():
    videoid = request.args.get("v")
    if videoid:
        videoInfo = GetInfo(videoid, ydl_opts)
        videoInfo["channel_follower_count"] = numerize.numerize(videoInfo["channel_follower_count"])
        return render_template("watch.html", style=GetStyle(), videoInfo=videoInfo)
    else:
        redirect("/")


@app.route("/api/watch/<id>/<format>", methods=("GET", "POST"))
def apiwatch(id, format):
    videoURL = ""
    if str(format) == "0":
        with YoutubeDL({"format": "bv"}) as ydl:
            info_dict = ydl.extract_info(id, download=False)
            videoURL = info_dict["url"]
    else:
        with YoutubeDL({"format": "ba"}) as ydl:
            info_dict = ydl.extract_info(id, download=False)
            videoURL = info_dict["url"]
    return redirect(videoURL)


@app.route("/api/similar/<id>", methods=("GET", "POST"))
def apisimilar(id):
    searchresults = SearchYouTube(id, 20)
    return render_template("similar.html", style=GetStyle(), results=searchresults)


@app.route("/channel/<id>", methods=("GET", "POST"))
def channel(id):
    channelInfo = GetInfo(
        "https://youtube.com/channel/" + id, channel_info_ydl_opts)
    channelInfo["channel_follower_count"] = numerize.numerize(channelInfo["channel_follower_count"])
    #return channelInfo
    return render_template("channel.html", style=GetStyle(), channelInfo=channelInfo)


@app.route("/switchcss", methods=("GET", "POST"))
def switchcss():
    if request.method == "POST":
        stylesheetlink = request.form["stylesheetlink"]
        resp = make_response(redirect("/switchcss"))
        resp.set_cookie("style", stylesheetlink)
        return resp
    return render_template("switchcss.html", style=GetStyle())


@app.errorhandler(404)
def page_not_found(e):
    return render_template("error.html", error="This page does not exist. (404)", style=GetStyle())


@app.errorhandler(500)
def page_not_found(e):
    return render_template("error.html", error="Something wrong happened. (500)", style=GetStyle())


# Start server
if __name__ == "__main__":
    print("Server started")
    from waitress import serve
    serve(app, host=HOST, port=PORT)
    print("Server stopped")
