#!/usr/bin/python3
import os
import configparser
from yt_dlp import YoutubeDL
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, send_from_directory

# Define flask
app = Flask(__name__)


# Read configuration
config = configparser.ConfigParser()
config.read("config.ini")

HOST = config["config"]["HOST"]
PORT = config["config"]["PORT"]

# [ext=mp4]

ydl_opts = {"format": "bv+ba[ext=webm]",
            "noplaylist": "True",
            "extract_flat": "in_playlist"}


# Delete directory
def DeleteDir(dir):
    if dir[-1] == os.sep:
        dir = dir[:-1]
    files = os.listdir(dir)
    for file in files:
        if file == '.' or file == '..':
            continue
        path = dir + os.sep + file
        if os.path.isdir(path):
            nukedir(path)
        else:
            os.unlink(path)
    os.rmdir(dir)


def SearchYouTube(query, max):
    with YoutubeDL(ydl_opts) as ydl:
        searchresults = ydl.extract_info(f"ytsearch{max}:{query}", download=False)[
            "entries"][0:max]
        return searchresults


def GetInfo(id):
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(id, download=False)
        return info


@app.route("/", methods=("GET", "POST"))
def home():
    return render_template("main.html", startpage="startpage")


@app.route("/results", methods=("GET", "POST"))
def results():
    search_query = request.args.get("search_query")
    if search_query:
        searchresults = SearchYouTube(search_query, 60)
        return render_template("main.html", results=searchresults, searchquery=search_query)
    else:
        return redirect("/")

    return render_template("main.html")


@app.route("/watch", methods=("GET", "POST"))
def watch():
    videoid = request.args.get("v")
    if videoid:
        videoInfo = GetInfo(videoid)
        #return videoInfo
        return render_template("watch.html", videoInfo=videoInfo)
    else:
        redirect("/")


@app.route("/api/watch/<id>/<quality>", methods=("GET", "POST"))
def apiwatch(id, quality):
    videoInfo = GetInfo(id)
    videoURL = ""
    if str(quality) == "0":
        videoURL = videoInfo["formats"][21]["url"]
    elif str(quality) == "1":
        try:
            videoURL = videoInfo["formats"][37]["url"]
        except:
            videoURL = videoInfo["formats"][32]["url"]
        else:
            videoURL = videoInfo["formats"][27]["url"]
        finally:
            videoURL = videoInfo["formats"][25]["url"]
    else:
        try:
            videoURL = videoInfo["formats"][9]["url"]
        except:
            videoURL = videoInfo["formats"][8]["url"]
        else:
            videoURL = videoInfo["formats"][7]["url"]
        finally:
            videoURL = videoInfo["formats"][4]["url"]
    return redirect(videoURL)


@app.route("/api/similar/<id>", methods=("GET", "POST"))
def apisimilar(id):
    searchresults = SearchYouTube(id, 20)
    return render_template("similar.html", results=searchresults)


@app.route("/channel/<id>", methods=("GET", "POST"))
def channelredir(id):
    return id


# Start server
if __name__ == "__main__":
    print("Server started")
    from waitress import serve
    serve(app, host=HOST, port=PORT)
    print("Server stopped")
